{"version":3,"sources":["GameBoard.jsx","Sudoku.jsx","App.js","reportWebVitals.js","index.js"],"names":["GameBoard","props","classes","guesses","solved","useState","grid","setGrid","useEffect","Array","generateBorder","row","r","inc","hc","id","onKeyDown","evt","key","preventDefault","type","min","max","class","readonly","map","Sudoku","matrix","board","setBoard","pick5","npr","Set","size","add","Math","floor","random","determinePattern","puzzle","solvedPuzzle","difficultyPoints","i","length","has","distributePattern","d","c","push","boardPattern","selectedConfig","diff","createSudokuMatrix","solvepuzzle","makepuzzle","unsolved","setTimer","timer","timerShown","setTimerShown","timerButtonText","setTimerButtonText","patt","setSelectedConfig","style","display","flexDirection","justifyContent","onClick","bg","prevState","for","name","onChange","e","target","value","handleSelectChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d050d4c4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './GameBoard.css';\n\nexport default function GameBoard(props) {\n    const classes = {\n        gc: \"grid-cell\",\n        gch: \"grid-cell-hint\",\n        gct: \"grid-cell tborder\",\n        ght: \"grid-cell-hint tborder\",\n        gcb: \"grid-cell bborder\",\n        ghb: \"grid-cell-hint bborder\",\n        gcl: \"grid-cell lborder\",\n        ghl: \"grid-cell-hint lborder\",\n        gclt: \"grid-cell tborder lborder\",\n        ghlt: \"grid-cell-hint tborder lborder\",\n        gclb: \"grid-cell bborder lborder\",\n        ghlb: \"grid-cell-hint bborder lborder\",\n    }\n    const {guesses, solved} = props\n\n    const [grid, setGrid] = useState([0])\n\n    useEffect(() => {\n        setGrid([])\n        setGrid(guesses)\n    }, [guesses])\n\n    const [boardValues, setBoardValues] = useState(new Array(81))\n\n    const onInputChange = (e) => {\n        let {id, value} = e.target\n        let key = id.split('-')[1]\n        setBoardValues(...boardValues, boardValues[key] = value)\n        console.log(boardValues, key, \"sep\", value)\n    }\n\n    const generateBorder = (row, r, inc, hc) => {\n        return row === null ? (\n            <>\n            <input id={`input-${r}`} onKeyDown={ (evt) => evt.key === 'e' && evt.preventDefault() } /* onChange={(e) => onInputChange(e)} */ type='number' min=\"0\" max='9' class={inc} /* value={boardValues[r]} */></input>\n            \n            </>\n        ) : (\n            <h3 class={hc} key={r} readonly>{row}</h3>\n        )\n    }\n\n    const onCellInput = (e) => {\n        // takes number, row, column, + block -- adds to set\n        // checks to see if number is in set -- either add and check if size is same or different OR\n        // if \n        let cellLocation = e.event.target.r; // either a number == 42, or grid [0,1]\n        let coordinate = getXY(cellLocation)\n        let box = getBox(coordinate)\n        let cellData = new Set()\n        // check row\n        for(let i=0; i<9; i++) {\n            if(cellData.has([i, coordinate[0]])) {\n                // return function that changes current input (coordinate) and [i, coordinate[0]]to have an \"error\" class added\n            } else cellData.add([i, coordinate[0]])\n        }\n        // check column\n        for(let i=0; i<9; i++) {\n            if(cellData.has([coordinate[1], i])) {\n                // return function that changes current input (coordinate) and [i, coordinate[0]]to have an \"error\" class added\n            } else cellData.add([coordinate[1], i]) // adding coordinate, or value of box?\n        }\n        // check box\n        for(let point of box) {\n            if(cellData.has(point)) {\n                // return function that changes current input (coordinate) and [i, coordinate[0]]to have an \"error\" class added\n            } else cellData.add(point)\n\n        }\n\n    }\n\n    const getXY = (num) => {\n            return [num%9, Math.floor(num/9)]\n    }\n\n    const getBox = (coordinate) => {\n        // [2-0, 2-0], [5-3, 2-0], [8-6, 2-0]\n        // [2-0, 5-3], [5-3, 5-3], [8-6, 5-3]\n        // [2-0, 8-6], [5-3, 8-6], [8-6, 8-6]\n        let {x, y} = coordinate\n        let boxes = [[[0,0], [2,2]],[[3,0], [5,2]], ] \n        // 9 boxes\n        let horiz = [0,2] ? x < 3 : [3, 5] ? x < 6 : [6,8]\n        let vert = [0,2] ? y < 3 : [3, 5] ? y < 6 : [6,8]\n        /**\n         if x < 3 [0,2]\n         if x < 6 [3,5]\n         if x < 9 [6,8]\n         */\n        let points = []\n        for(let i=horiz[0]; i <= horiz[1]; i++) {\n            for(let j=vert[0]; i<= vert[1]; j++) {\n                points.push([i, j])\n            }\n        } // memoize and store in state or cache local storage\n        return points\n    }\n\n    return (    \n        <div id=\"parent-grid\">\n            {grid.map((row, r) => {\n                //let m = r%9; // m is 0 for 0-8, 1 for 9-17, etc.\n                if(r===0 || r===27 || r===54) {\n                    return generateBorder(row, r, classes.gclt, classes.ghlt)\n                }\n                if(r===72) {\n                    return generateBorder(row, r, classes.gclb, classes.gclb)\n                }\n                if(r%9 === 0) {\n                    return generateBorder(row, r, classes.gcl, classes.ghl)\n                }\n                if(r < 9 && r > -1 || r < 36 && r > 26  || r < 63 && r > 53 ) {\n                    return generateBorder(row, r, classes.gct, classes.ght)\n                }\n                if(r < 90 && r > 71 ) {\n                    return generateBorder(row, r, classes.gcb, classes.ghb)\n                }\n                return generateBorder(row, r, classes.gc, classes.gch)\n    })}\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react'\nimport GameBoard from './GameBoard'\nimport { makepuzzle, solvepuzzle, } from \"sudoku\";\nimport './Sudoku.css'\n\nexport default function Sudoku() {\n    // functions for creating sudoku board (number grid)\n    // function for mapping grid to table and rows\n    // css for making table and rows look okay\n\n    const [board, setBoard] = useState({\n        matrix: [],\n        solved: []\n    })\n\n    const pick5 = (npr) => {\n        let row = new Set()\n        while(row.size<npr) {\n              row.add(Math.floor(Math.random() * 8)+1)\n        }\n        return row\n      }\n      \n      const boardPattern = (d) => { //difficulty\n        let board = []\n        for(let i=0; i<9;i++) {\n          let c = pick5(d)\n          board.push(c)\n        }\n        return board // 8 array of sets of d size\n      }\n      \n      const distributePattern = (solvedPuzzle, difficultyPoints) => {\n        for(let i=0; i<solvedPuzzle.length; i++) {\n            let row = Math.floor(i/9)\n            if(!difficultyPoints[row].has(solvedPuzzle[i])) {\n                solvedPuzzle[i] = null;\n            }\n        }\n        return solvedPuzzle\n    }\n\n    const determinePattern = (puzzle) => {\n        let ratio = selectedConfig.diff === 'diamond' ? 2 : selectedConfig.diff === \"bruisin'\" ? 3 : selectedConfig.diff === 'moderate' ? 4: 5;\n        let pattern = boardPattern(ratio)\n        return distributePattern(puzzle, pattern)\n    }\n\n    const resetBoard = () => {\n\n    }\n\n\n    const createSudokuMatrix = () => {\n\n        let solved = solvepuzzle(makepuzzle())\n        let unsolved = determinePattern(solved)\n        \n        setBoard({matrix: unsolved, solved: solvepuzzle(makepuzzle())});\n        setTimer(0)\n    }\n\n    const checkGameValidity = () => {\n        /**\n     check matrix + solved\n     \n     */\n    }\n\n    const pomodoroTimer = () => {\n        // when timer is in\n    }\n\n    const [timer, setTimer] = useState(0) // seconds -- resets timer\n    \n    const [gameInPlay, setGameInPlay] = useState(false) // starts timer, stops counting\n\n    const [timerShown, setTimerShown] = useState(false) // timer shown or not\n\n    const [timerButtonText, setTimerButtonText] = useState('Show Timer')\n\n\n\n\n\n    const toggleTimer = (bg) => {\n        setTimerShown(prevState => {return !prevState})\n        setTimerButtonText(!bg ? 'Hide Timer' : 'Show Timer')\n    }\n    useEffect(() => {\n        createSudokuMatrix()\n    }, [])\n\n    const selectOptions = {\n        diff: [\"easy\", \"moderate\", \"bruisin'\", \"diamond\"],\n        patt: [\"random\", \"arctic\", \"subtropical\", \"arid\"]\n    }\n\n    const [selectedConfig, setSelectedConfig] = useState({\n        diff: \"easy\",\n        patt: \"random\"\n    })\n\n\n    const handleSelectChange = (e) => {\n        const {value, name} = e.target\n        setSelectedConfig(selectedConfig, selectedConfig[name] = value)\n    }\n\n\n    return (\n        \n        <div>\n            <h2>Not Sudoku</h2> \n\n            <GameBoard class=\"shrink\" guesses={board.matrix} solved={board.solved} />\n            \n            <h2> </h2>\n            <menu style={{display: 'inline-flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n            <button onClick={createSudokuMatrix}> New Game</button>\n            {/* <button onClick={checkGameValidity}>Check Answers</button> */}\n            <button onClick={() =>toggleTimer(timerShown)}>{timerButtonText}</button>\n            {timerShown ? (<h3>{timer}</h3>) : null}\n            </menu>\n\n            <h2> </h2>\n\n            <label for=\"difficult_btn\">Difficulty:</label>\n            <select name=\"diff\" id=\"difficult_btn\" onChange={(e) => handleSelectChange(e)}>\n                {selectOptions.diff.map((d, key) => {\n                    return <option key={key} name={'diff'} name={key} value={d}>{d}</option>\n                })}\n            </select>\n\n           \n        </div>\n    )\n}\n\n\n\n\n\n/**\n * \n const resetBoard = () => {\n        setBoard({matrix: Array.from([0]).fill(0,0, 81), solved: [0]})\n        return \"found cake\"\n    }\n\n\n     <option value=\"easy\">easy (40/81)</option>\n                <option value=\"moderate\">moderate (33/81)</option>\n                <option value=\"bruisin\">bruisin (26/81)</option>\n                <option value=\"diamond\">diamond (20/81)</option>\n */","import './App.css';\nimport Sudoku from './Sudoku';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sudoku />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}