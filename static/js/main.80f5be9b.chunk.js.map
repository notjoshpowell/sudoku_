{"version":3,"sources":["reportWebVitals.js","GameBoard.jsx","Sudoku.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameBoard","props","classes","guesses","solved","useState","grid","setGrid","boardValues","setBoardValues","Array","fill","getBox","coordinate","i","j","x","y","boxes","n","m","push","getLine","d","line","getRowKey","c","onCellInput","v","r","num","Math","floor","eleV","document","getElementById","collection","concat","counter","col","rk","ele","style","color","generateBorder","row","inc","hc","id","onKeyDown","evt","key","preventDefault","onChange","e","value","target","onInputChange","type","min","max","class","readOnly","useEffect","map","Sudoku","matrix","board","setBoard","setTimer","diff","patt","selectedConfig","setSelectedConfig","pick5","npr","Set","size","add","random","determinePattern","puzzle","solvedPuzzle","difficultyPoints","length","has","distributePattern","boardPattern","setHints","setSolved","createSudokuMatrix","sol","solvepuzzle","makepuzzle","console","log","copy","unsolved","hints","undef","undefined","createHintArray","cursorSpeed","display","textAlign","verticalAlign","width","minHeight","marginTop","padding","paddingLeft","className","onClick","for","name","handleSelectChange","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80f5be9b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from 'react'\nimport './GameBoard.css';\n\nexport default function GameBoard(props) {\n    const classes = {\n        gc: \"grid-cell\",\n        gcb: \"grid-cell bborder\",\n\n        gclb: \"grid-cell bborder lborder \",\n        ghb: \"grid-cell bborder hint\",\n\n        gch: \"grid-cell hint\",\n        gcl: \"grid-cell lborder\",\n\n        ghl: \"grid-cell  lborder hint\",\n        ghlb: \"grid-cell lborder bborder hint\",\n\n        gct: \"grid-cell tborder\",\n        ght: \"grid-cell tborder hint\",\n\n        gclt: \"grid-cell tborder lborder\",\n        ghlt: \"grid-cell tborder lborder hint\",\n        \n    }\n    const {guesses, solved} = props\n    const [grid, setGrid] = useState([0])\n    const [boardValues, setBoardValues] = useState(grid)\n    const [errorInCell, setErrorInCell] = useState(new Array(81).fill(false))\n\n    const getBox = (coordinate) => {\n        let [x,y] = coordinate\n        let boxes = []\n        let i, j\n        // [0,2], [3,5], [6,8]\n        if(x < 3) {\n            i= 2\n        } else if (x < 6) {\n            i = 5\n        } else i = 8\n\n        if(y < 3) {\n            j= 2\n        } else if (y < 6) {\n            j = 5\n        } else j = 8\n\n        for(let n = i-2; n<=i; n++) { \n            for(let m = j-2; m<=j; m++) { \n                boxes.push([n, m])\n            }\n        }\n        return boxes\n    }\n\n    const getLine = (d, m) => {\n        let line = []\n        if(m === \"R\") {\n            for(let i=0; i< 9; i++) {\n                line.push([i, d])\n            }\n        }\n        if(m === \"C\") {\n            for(let i=0; i< 9; i++) {\n                line.push([d, i])\n            }\n        }\n        return line\n    }\n\n    const getRowKey = (c) => {\n        let [x, y] = c\n        return (x + (y*9))\n    }\n\n    const getXY = (num) => {\n        return [num%9, Math.floor(num/9)]   \n    }\n\n    const onCellInput = (v, r) => {\n        // checks to see if number is in set -- either add and check if size is same or different OR\n        \n        let coordinate = getXY(r)\n        let eleV = document.getElementById(`input-${r}`) // selected cell\n        let box = getBox(coordinate)\n        let row = getLine(coordinate[1], \"R\")\n        let col = getLine(coordinate[0], \"C\")\n        const collection = [].concat(getBox(coordinate), getLine(coordinate[1], \"R\"), getLine(coordinate[0], \"C\"))\n\n        const cellsToChangeColor = []\n        let counter = 0\n        for(const col of collection) {\n            let rk = getRowKey(col)\n            let ele = document.getElementById(`input-${rk}`) // all but selected cell\n\n            if(boardValues[rk] == v && rk !== r) {  // highlight the value cell, and the index cell  \n                let ele = document.getElementById(`input-${rk}`) // all but selected cell\n            ele.style.color = 'red'\n            counter++\n            } else {\n                ele.style.color = 'black'\n            }\n        }\n\n        if(counter !== 0) {\n            eleV.style.color = 'red'\n        }\n\n    }\n\n    const onInputChange = (e, row) => {\n        let {value} = e.target\n        setBoardValues(boardValues, boardValues[row]= value)\n        // run against numbers in cell\n        onCellInput(value, row)\n    }\n\n    const generateBorder = (row, r, inc, hc) => {\n        return row == null ? (\n            <>\n            <input id={`input-${r}`} onKeyDown={ (evt) => evt.key === 'e' && evt.preventDefault() }  onChange={(e) => onInputChange(e, r)} type='number' min=\"0\" max='9' class={`${inc}`} /* value={boardValues[r]} */ ></input>\n            </>\n        ) : (\n            <h3 id={`input-${r}`} class={`${hc}`} key={r} value={row} readOnly>{row}</h3>\n        )\n    }\n\n    useEffect(() => {\n        setGrid([])\n        setGrid(guesses)\n        setBoardValues(guesses)\n    }, [guesses])\n    \n\n    return (    \n        <div id=\"sudoku-grid\">\n            {grid.map((row, r) => {// r = row index\n\n                //let m = r%9; // m is 0 for 0-8, 1 for 9-17, etc.\n                if(r===0 || r===27 || r===54) {\n                    return generateBorder(row, r, classes.gclt, classes.ghlt)\n                }\n                if(r===72) {\n                    return generateBorder(row, r, classes.gclb, classes.ghlb)\n                }\n                if(r%9 === 0) {\n                    return generateBorder(row, r, classes.gcl, classes.ghl)\n                }\n                if(r < 9 && r > -1 || r < 36 && r > 26  || r < 63 && r > 53 ) {\n                    return generateBorder(row, r, classes.gct, classes.ght)\n                }\n                if(r < 90 && r > 71 ) {\n                    return generateBorder(row, r, classes.gcb, classes.ghb)\n                }\n                return generateBorder(row, r, classes.gc, classes.gch)\n    })}\n        </div>\n    )\n}\n\n\n\n/**\n * \n on key up\n compare number (event value) to every value in row, column, and box\n\n */","import React, {useEffect, useState} from 'react'\nimport GameBoard from './GameBoard'\nimport { makepuzzle, ratepuzzle, solvepuzzle, } from \"sudoku\";\nimport './Sudoku.css'\nimport Header from './SideNav';\n\nexport default function Sudoku() {\n    // functions for creating sudoku board (number grid)\n    // function for mapping grid to table and rows\n    // css for making table and rows look okay\n\n    const [board, setBoard] = useState({\n        matrix: [],\n        solved: []\n    })\n\n    const handleSelectChange = (e) => {\n        const {value, name} = e.target\n        setSelectedConfig(selectedConfig, selectedConfig[name] = value)\n    }\n\n    const toggleTimer = (bg) => {\n        setTimerShown(prevState => {return !prevState})\n        setTimerButtonText(!bg ? 'Hide Timer' : 'Show Timer')\n    } \n\n    const resetBoard = () => {\n\n    }\n\n   \n\n    const checkGameValidity = () => {\n        /**\n     check matrix + solved\n     \n     */\n    }\n\n    const pomodoroTimer = () => {\n        // when timer is in\n    }\n\n    const [timerShown, setTimerShown] = useState(false)\n \n \n    \n\n    const [timer, setTimer] = useState(0) // seconds -- resets timer\n    \n    const [gameInPlay, setGameInPlay] = useState(false) // starts timer, stops counting\n\n    const [selectedConfig, setSelectedConfig] = useState({\n        diff: \"easy\",\n        patt: \"random\"\n    })\n\n    const pick5 = (npr) => {\n        let row = new Set()\n        while(row.size<npr) {\n              row.add(Math.floor(Math.random() * 8)+1)\n        }\n        return row\n      }\n      \n      const boardPattern = (d) => { //difficulty\n        let board = []\n        for(let i=0; i<9;i++) {\n          let c = pick5(d)\n          board.push(c)\n        }\n        return board // 8 array of sets of d size\n      }\n      \n      const distributePattern = (solvedPuzzle, difficultyPoints) => {\n        for(let i=0; i<solvedPuzzle.length; i++) {\n            let row = Math.floor(i/9)\n            if(!difficultyPoints[row].has(solvedPuzzle[i])) {\n                solvedPuzzle[i] = null;\n            }\n        }\n        return solvedPuzzle\n    }\n\n    const determinePattern = (puzzle) => {\n        let ratio = selectedConfig.diff === 'triple diamond' ? 2 : selectedConfig.diff === \"difficult\" ? 3 : selectedConfig.diff === 'moderate' ? 4: 5;\n        let pattern = boardPattern(ratio)\n        return distributePattern(puzzle, pattern)\n    }\n\n    const createHintArray = (solved, unsolved) => {\n        let undef = []\n        let i = 0\n        for(const u of unsolved) {\n            if(u == undefined) {\n                undef.push(i)\n            }\n            i++\n        }// get unsolved index\n        return undef\n    }\n\n\n    const [hints, setHints] = useState([])\n\n    const [solved, setSolved] = useState([])\n\n\n\n    const createSudokuMatrix = () => {\n\n        const sol = solvepuzzle(makepuzzle())\n        setSolved(sol)\n        let i = 0\n        console.log(sol, 'SOL')\n        let copy = sol\n\n        \n        let unsolved = determinePattern(sol)\n        console.log(sol, 'SOL')\n\n        let hints = createHintArray(sol, unsolved)\n        let cursorS = cursorSpeed\n    \n        setHints(hints)\n        console.log(solved, 'solved state')\n        setBoard({matrix: unsolved, solved: copy});\n        setTimer(0)\n    }\n\n\n\n\n\n    \n    useEffect(() => {\n        createSudokuMatrix()\n    }, [])\n\n    const selectOptions = {\n        diff: [\"easy\", \"moderate\", \"difficult\", \"triple diamond\"],\n        patt: [\"random\", \"arctic\", \"subtropical\", \"arid\"]\n    }\n\n    const cursorSpeedOptions = [\"fast\", \"slow\"]\n\n    const handleSpeedChange = () => {\n        return \"dppfus\"\n    }\n\n\n    /**\n     * \n     \n     */\n\n    const giveHint = () => {\n        let m = board.matrix;\n        let s = board.solved;\n        let rando = Math.floor(Math.random()*hints.length)\n        let inpElem = document.getElementById(`input-${hints[rando]}`)\n        if(!!inpElem && inpElem.value != undefined && inpElem.style.color != 'red') { //if it's filled in, or it's an error\n            inpElem.value = s[hints[rando]]\n            setHints(hints, hints.splice(rando, 1))\n        }\n        console.log('rando', rando, 'inpElem', inpElem, 'val', '', s[hints[rando]])       \n    }\n\n    const checkAnswers = () => {\n        let collection = []\n        for(let i=0; i<81; i++) {\n            console.log(document.getElementById(`input-${i}`.textContent))\n            let c = document.getElementById(`input-${i}`).textContent\n            collection.push(c)\n        }\n        console.log('collection', collection, 'solved', board.solved)\n        if(!collection.length == 81) {\n            return false\n        }\n        for(let i=0; i<81; i++) {\n            if(collection[i] !== board.solved) {\n                return false\n            }\n        }\n        console.log(\"it's britney bitch\")\n        return true\n        \n        }\n\n\n\n \n     const [timerButtonText, setTimerButtonText] = useState('Show Timer')\n\n     const [cursorSpeed, setCursorSpeed] = ['fast']\n\n\n\n\n    \n\n\n    return (\n                <div style={{display: 'table-cell',\n                    textAlign: 'center',\n                    verticalAlign: 'middle', width: '100%'}}>\n                <header style={{minHeight: \"10vh\"}}>\n                    <h2 style={{marginTop: 0, padding: '1rem'}}>Not Sudoku</h2> \n                </header>\n\n                <main style={{minHeight: \"90vh\", paddingLeft: \"3em\"}}>\n                    <section  className=\"shake-board\" >\n                        <GameBoard guesses={board.matrix} cursorSpeed={cursorSpeed} />\n                    </section>\n\n                    <menu id=\"menu-below-board\">\n                        <button onClick={createSudokuMatrix}> New Game</button>\n                        {/* <button onClick={checkGameValidity}>Check Answers</button> */}\n                        {/* <button onClick={giveHint}>Give Hint</button>\n                        <button onClick={checkAnswers}>Check Answers</button> */} \n                    </menu>\n\n                    <label for=\"difficult_btn\">Difficulty:</label>\n                    <select name=\"diff\" id=\"difficult_btn\" onChange={(e) => handleSelectChange(e)}>\n                        {selectOptions.diff.map((d, key) => {\n                            return <option key={key} name={'diff'} name={key} value={d}>{d}</option>\n                        })}\n                    </select>\n                   {/*  <select name=\"sped\" id=\"crs_speed_btn\" onChange={(e) => handleSpeedChange(e)}>\n                        {cursorSpeedOptions.diff.map((d, key) => {\n                            return <option key={key} name={'sped'} name={key} value={d}>{d}</option>\n                        })}\n                    </select> */}\n                </main> \n\n                </div>\n            \n                    \n                 \n            \n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Sudoku from './Sudoku';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Sudoku />\n  </React.StrictMode>,\n  document.getElementById('groot')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}